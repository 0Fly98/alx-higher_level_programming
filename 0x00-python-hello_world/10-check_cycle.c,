#include "lists.h"

/**
 * check_cycle - function checks if a singly linked list has a cycle in it.
 * @list: pointer to the beginning of the node
 * Return: 0 if no cycle, 1 if there is a cycle
 */
int check_cycle(listint_t *list)
{
    listint_t *slow_ptr = list;
    listint_t *fast_ptr = list;

    while (slow_ptr && fast_ptr && fast_ptr->next)
    {
        slow_ptr = slow_ptr->next;
        fast_ptr  = fast_ptr->next->next;

        /* If slow_ptr and fast_ptr meet at some point then there
           is a loop */
        if (slow_ptr == fast_ptr)
        {
            return 1;
        }
    }

    /* Return 0 to indicate that there is no loop*/
    return 0;
}
